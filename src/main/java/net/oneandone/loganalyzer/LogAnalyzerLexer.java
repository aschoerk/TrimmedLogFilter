/* The following code was generated by JFlex 1.6.1 */

package net.oneandone.loganalyzer;


/* JFlex example: partial Java language lexer specification */
import net.oneandone.loganalyzer.helpers.Symbol;
import net.oneandone.loganalyzer.helpers.Symbol.Sym;

/**
 * This class is a simple example lexer.
 */



public class LogAnalyzerLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int SENTENCE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\27\1\22\1\21\1\0\1\22\1\20\16\27\4\0\1\22\1\23"+
    "\1\0\1\0\1\25\3\0\1\0\1\0\2\0\1\24\1\26\1\30"+
    "\1\0\1\27\1\27\10\27\2\24\3\0\1\23\1\0\1\5\1\15"+
    "\1\17\1\14\1\1\1\4\1\13\1\25\1\6\2\25\1\7\1\25"+
    "\1\12\1\3\2\25\1\2\1\25\1\16\1\10\1\25\1\11\3\25"+
    "\1\0\1\0\1\0\1\0\1\25\1\0\1\36\3\25\1\33\1\25"+
    "\2\25\1\31\3\25\1\35\1\32\1\40\2\25\1\34\1\25\1\37"+
    "\6\25\4\0\41\27\2\0\4\25\4\0\1\25\2\0\1\27\7\0"+
    "\1\25\4\0\1\25\5\0\27\25\1\0\37\25\1\0\u01ca\25\4\0"+
    "\14\25\16\0\5\25\7\0\1\25\1\0\1\25\21\0\160\27\5\25"+
    "\1\0\2\25\2\0\4\25\10\0\1\25\1\0\3\25\1\0\1\25"+
    "\1\0\24\25\1\0\123\25\1\0\213\25\1\0\5\27\2\0\236\25"+
    "\11\0\46\25\2\0\1\25\7\0\47\25\7\0\1\25\1\0\55\27"+
    "\1\0\1\27\1\0\2\27\1\0\2\27\1\0\1\27\10\0\33\25"+
    "\5\0\3\25\15\0\5\27\6\0\1\25\4\0\13\27\5\0\53\25"+
    "\37\27\4\0\2\25\1\27\143\25\1\0\1\25\10\27\1\0\6\27"+
    "\2\25\2\27\1\0\4\27\2\25\12\27\3\25\2\0\1\25\17\0"+
    "\1\27\1\25\1\27\36\25\33\27\2\0\131\25\13\27\1\25\16\0"+
    "\12\27\41\25\11\27\2\25\4\0\1\25\5\0\26\25\4\27\1\25"+
    "\11\27\1\25\3\27\1\25\5\27\22\0\31\25\3\27\104\0\1\25"+
    "\1\0\13\25\67\0\33\27\1\0\4\27\66\25\3\27\1\25\22\27"+
    "\1\25\7\27\12\25\2\27\2\0\12\27\1\0\7\25\1\0\7\25"+
    "\1\0\3\27\1\0\10\25\2\0\2\25\2\0\26\25\1\0\7\25"+
    "\1\0\1\25\3\0\4\25\2\0\1\27\1\25\7\27\2\0\2\27"+
    "\2\0\3\27\1\25\10\0\1\27\4\0\2\25\1\0\3\25\2\27"+
    "\2\0\12\27\4\25\7\0\1\25\5\0\3\27\1\0\6\25\4\0"+
    "\2\25\2\0\26\25\1\0\7\25\1\0\2\25\1\0\2\25\1\0"+
    "\2\25\2\0\1\27\1\0\5\27\4\0\2\27\2\0\3\27\3\0"+
    "\1\27\7\0\4\25\1\0\1\25\7\0\14\27\3\25\1\27\13\0"+
    "\3\27\1\0\11\25\1\0\3\25\1\0\26\25\1\0\7\25\1\0"+
    "\2\25\1\0\5\25\2\0\1\27\1\25\10\27\1\0\3\27\1\0"+
    "\3\27\2\0\1\25\17\0\2\25\2\27\2\0\12\27\1\0\1\25"+
    "\17\0\3\27\1\0\10\25\2\0\2\25\2\0\26\25\1\0\7\25"+
    "\1\0\2\25\1\0\5\25\2\0\1\27\1\25\7\27\2\0\2\27"+
    "\2\0\3\27\10\0\2\27\4\0\2\25\1\0\3\25\2\27\2\0"+
    "\12\27\1\0\1\25\20\0\1\27\1\25\1\0\6\25\3\0\3\25"+
    "\1\0\4\25\3\0\2\25\1\0\1\25\1\0\2\25\3\0\2\25"+
    "\3\0\3\25\3\0\14\25\4\0\5\27\3\0\3\27\1\0\4\27"+
    "\2\0\1\25\6\0\1\27\16\0\12\27\11\0\1\25\7\0\3\27"+
    "\1\0\10\25\1\0\3\25\1\0\27\25\1\0\12\25\1\0\5\25"+
    "\3\0\1\25\7\27\1\0\3\27\1\0\4\27\7\0\2\27\1\0"+
    "\2\25\6\0\2\25\2\27\2\0\12\27\22\0\2\27\1\0\10\25"+
    "\1\0\3\25\1\0\27\25\1\0\12\25\1\0\5\25\2\0\1\27"+
    "\1\25\7\27\1\0\3\27\1\0\4\27\7\0\2\27\7\0\1\25"+
    "\1\0\2\25\2\27\2\0\12\27\1\0\2\25\17\0\2\27\1\0"+
    "\10\25\1\0\3\25\1\0\51\25\2\0\1\25\7\27\1\0\3\27"+
    "\1\0\4\27\1\25\10\0\1\27\10\0\2\25\2\27\2\0\12\27"+
    "\12\0\6\25\2\0\2\27\1\0\22\25\3\0\30\25\1\0\11\25"+
    "\1\0\1\25\2\0\7\25\3\0\1\27\4\0\6\27\1\0\1\27"+
    "\1\0\10\27\22\0\2\27\15\0\60\25\1\27\2\25\7\27\4\0"+
    "\10\25\10\27\1\0\12\27\47\0\2\25\1\0\1\25\2\0\2\25"+
    "\1\0\1\25\2\0\1\25\6\0\4\25\1\0\7\25\1\0\3\25"+
    "\1\0\1\25\1\0\1\25\2\0\2\25\1\0\4\25\1\27\2\25"+
    "\6\27\1\0\2\27\1\25\2\0\5\25\1\0\1\25\1\0\6\27"+
    "\2\0\12\27\2\0\4\25\40\0\1\25\27\0\2\27\6\0\12\27"+
    "\13\0\1\27\1\0\1\27\1\0\1\27\4\0\2\27\10\25\1\0"+
    "\44\25\4\0\24\27\1\0\2\27\5\25\13\27\1\0\44\27\11\0"+
    "\1\27\71\0\53\25\24\27\1\25\12\27\6\0\6\25\4\27\4\25"+
    "\3\27\1\25\3\27\2\25\7\27\3\25\4\27\15\25\14\27\1\25"+
    "\17\27\2\0\46\25\1\0\1\25\5\0\1\25\2\0\53\25\1\0"+
    "\u014d\25\1\0\4\25\2\0\7\25\1\0\1\25\1\0\4\25\2\0"+
    "\51\25\1\0\4\25\2\0\41\25\1\0\4\25\2\0\7\25\1\0"+
    "\1\25\1\0\4\25\2\0\17\25\1\0\71\25\1\0\4\25\2\0"+
    "\103\25\2\0\3\27\40\0\20\25\20\0\125\25\14\0\u026c\25\2\0"+
    "\21\25\1\0\32\25\5\0\113\25\3\0\3\25\17\0\15\25\1\0"+
    "\4\25\3\27\13\0\22\25\3\27\13\0\22\25\2\27\14\0\15\25"+
    "\1\0\3\25\1\0\2\27\14\0\64\25\40\27\3\0\1\25\3\0"+
    "\2\25\1\27\2\0\12\27\41\0\3\27\2\0\12\27\6\0\130\25"+
    "\10\0\51\25\1\27\1\25\5\0\106\25\12\0\35\25\3\0\14\27"+
    "\4\0\14\27\12\0\12\27\36\25\2\0\5\25\13\0\54\25\4\0"+
    "\21\27\7\25\2\27\6\0\12\27\46\0\27\25\5\27\4\0\65\25"+
    "\12\27\1\0\35\27\2\0\13\27\6\0\12\27\15\0\1\25\130\0"+
    "\5\27\57\25\21\27\7\25\4\0\12\27\21\0\11\27\14\0\3\27"+
    "\36\25\15\27\2\25\12\27\54\25\16\27\14\0\44\25\24\27\10\0"+
    "\12\27\3\0\3\25\12\27\44\25\122\0\3\27\1\0\25\27\4\25"+
    "\1\27\4\25\3\27\2\25\11\0\300\25\47\27\25\0\4\27\u0116\25"+
    "\2\0\6\25\2\0\46\25\2\0\6\25\2\0\10\25\1\0\1\25"+
    "\1\0\1\25\1\0\1\25\1\0\37\25\2\0\65\25\1\0\7\25"+
    "\1\0\1\25\3\0\3\25\1\0\7\25\3\0\4\25\2\0\6\25"+
    "\4\0\15\25\5\0\3\25\1\0\7\25\16\0\5\27\32\0\5\27"+
    "\20\0\2\25\23\0\1\25\13\0\5\27\5\0\6\27\1\0\1\25"+
    "\15\0\1\25\20\0\15\25\3\0\33\25\25\0\15\27\4\0\1\27"+
    "\3\0\14\27\21\0\1\25\4\0\1\25\2\0\12\25\1\0\1\25"+
    "\3\0\5\25\6\0\1\25\1\0\1\25\1\0\1\25\1\0\4\25"+
    "\1\0\13\25\2\0\4\25\5\0\5\25\4\0\1\25\21\0\51\25"+
    "\u0a77\0\57\25\1\0\57\25\1\0\205\25\6\0\4\25\3\27\2\25"+
    "\14\0\46\25\1\0\1\25\5\0\1\25\2\0\70\25\7\0\1\25"+
    "\17\0\1\27\27\25\11\0\7\25\1\0\7\25\1\0\7\25\1\0"+
    "\7\25\1\0\7\25\1\0\7\25\1\0\7\25\1\0\7\25\1\0"+
    "\40\27\57\0\1\25\u01d5\0\3\25\31\0\11\25\6\27\1\0\5\25"+
    "\2\0\5\25\4\0\126\25\2\0\2\27\2\0\3\25\1\0\132\25"+
    "\1\0\4\25\5\0\51\25\3\0\136\25\21\0\33\25\65\0\20\25"+
    "\u0200\0\u19b6\25\112\0\u51cd\25\63\0\u048d\25\103\0\56\25\2\0\u010d\25"+
    "\3\0\20\25\12\27\2\25\24\0\57\25\1\27\4\0\12\27\1\0"+
    "\31\25\7\0\1\27\120\25\2\27\45\0\11\25\2\0\147\25\2\0"+
    "\4\25\1\0\4\25\14\0\13\25\115\0\12\25\1\27\3\25\1\27"+
    "\4\25\1\27\27\25\5\27\20\0\1\25\7\0\64\25\14\0\2\27"+
    "\62\25\21\27\13\0\12\27\6\0\22\27\6\25\3\0\1\25\4\0"+
    "\12\27\34\25\10\27\2\0\27\25\15\27\14\0\35\25\3\0\4\27"+
    "\57\25\16\27\16\0\1\25\12\27\46\0\51\25\16\27\11\0\3\25"+
    "\1\27\10\25\2\27\2\0\12\27\6\0\27\25\3\0\1\25\1\27"+
    "\4\0\60\25\1\27\1\25\3\27\2\25\2\27\5\25\2\27\1\25"+
    "\1\27\1\25\30\0\3\25\2\0\13\25\5\27\2\0\3\25\2\27"+
    "\12\0\6\25\2\0\6\25\2\0\6\25\11\0\7\25\1\0\7\25"+
    "\221\0\43\25\10\27\1\0\2\27\2\0\12\27\6\0\u2ba4\25\14\0"+
    "\27\25\4\0\61\25\u2104\0\u016e\25\2\0\152\25\46\0\7\25\14\0"+
    "\5\25\5\0\1\25\1\27\12\25\1\0\15\25\1\0\5\25\1\0"+
    "\1\25\1\0\2\25\1\0\2\25\1\0\154\25\41\0\u016b\25\22\0"+
    "\100\25\2\0\66\25\50\0\15\25\3\0\20\27\20\0\7\27\14\0"+
    "\2\25\30\0\3\25\31\0\1\25\6\0\5\25\1\0\207\25\2\0"+
    "\1\27\4\0\1\25\13\0\12\27\7\0\32\25\4\0\1\25\1\0"+
    "\32\25\13\0\131\25\3\0\6\25\2\0\6\25\2\0\6\25\2\0"+
    "\3\25\3\0\2\25\3\0\2\25\22\0\3\27\4\0\14\25\1\0"+
    "\32\25\1\0\23\25\1\0\2\25\1\0\17\25\2\0\16\25\42\0"+
    "\173\25\105\0\65\25\210\0\1\27\202\0\35\25\3\0\61\25\57\0"+
    "\37\25\21\0\33\25\65\0\36\25\2\0\44\25\4\0\10\25\1\0"+
    "\5\25\52\0\236\25\2\0\12\27\u0356\0\6\25\2\0\1\25\1\0"+
    "\54\25\1\0\2\25\3\0\1\25\2\0\27\25\252\0\26\25\12\0"+
    "\32\25\106\0\70\25\6\0\2\25\100\0\1\25\3\27\1\0\2\27"+
    "\5\0\4\27\4\25\1\0\3\25\1\0\33\25\4\0\3\27\4\0"+
    "\1\27\40\0\35\25\203\0\66\25\12\0\26\25\12\0\23\25\215\0"+
    "\111\25\u03b7\0\3\27\65\25\17\27\37\0\12\27\20\0\3\27\55\25"+
    "\13\27\2\0\1\27\22\0\31\25\7\0\12\27\6\0\3\27\44\25"+
    "\16\27\1\0\12\27\100\0\3\27\60\25\16\27\4\25\13\0\12\27"+
    "\u04a6\0\53\25\15\27\10\0\12\27\u0936\0\u036f\25\221\0\143\25\u0b9d\0"+
    "\u042f\25\u33d1\0\u0239\25\u04c7\0\105\25\13\0\1\25\56\27\20\0\4\27"+
    "\15\25\u4060\0\2\25\u2163\0\5\27\3\0\26\27\2\0\7\27\36\0"+
    "\4\27\224\0\3\27\u01bb\0\125\25\1\0\107\25\1\0\2\25\2\0"+
    "\1\25\2\0\2\25\2\0\4\25\1\0\14\25\1\0\1\25\1\0"+
    "\7\25\1\0\101\25\1\0\4\25\2\0\10\25\1\0\7\25\1\0"+
    "\34\25\1\0\4\25\1\0\5\25\1\0\1\25\3\0\7\25\1\0"+
    "\u0154\25\2\0\31\25\1\0\31\25\1\0\37\25\1\0\31\25\1\0"+
    "\37\25\1\0\31\25\1\0\37\25\1\0\31\25\1\0\37\25\1\0"+
    "\31\25\1\0\10\25\2\0\62\27\u1600\0\4\25\1\0\33\25\1\0"+
    "\2\25\1\0\1\25\2\0\1\25\1\0\12\25\1\0\4\25\1\0"+
    "\1\25\1\0\1\25\6\0\1\25\4\0\1\25\1\0\1\25\1\0"+
    "\1\25\1\0\3\25\1\0\2\25\1\0\1\25\2\0\1\25\1\0"+
    "\1\25\1\0\1\25\1\0\1\25\1\0\1\25\1\0\2\25\1\0"+
    "\1\25\2\0\4\25\1\0\7\25\1\0\4\25\1\0\4\25\1\0"+
    "\1\25\1\0\12\25\1\0\21\25\5\0\3\25\1\0\5\25\1\0"+
    "\21\25\u1144\0\ua6d7\25\51\0\u1035\25\13\0\336\25\u3fe2\0\u021e\25\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\27\36\0\140\27\200\0\360\27\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\7\2\2\3\1\4\2\5\1\2\2\0"+
    "\5\2\1\0\1\4\1\5\1\0\1\5\1\2\1\6"+
    "\5\2\1\0\1\2\1\0\1\2\1\7\3\2\1\0"+
    "\2\2\12\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[56];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\102\0\143\0\204\0\245\0\306\0\347"+
    "\0\u0108\0\u0129\0\u014a\0\102\0\u016b\0\u018c\0\u01ad\0\u01ce"+
    "\0\u01ef\0\u0210\0\u0231\0\u0252\0\u0273\0\u0294\0\u02b5\0\u02d6"+
    "\0\102\0\u02f7\0\u0318\0\u0339\0\u035a\0\u037b\0\u039c\0\u03bd"+
    "\0\u03de\0\u03ff\0\u0420\0\u0441\0\u0462\0\u0483\0\u04a4\0\204"+
    "\0\u04c5\0\u04e6\0\u0507\0\u0528\0\u0549\0\u056a\0\u058b\0\u05ac"+
    "\0\u05cd\0\u05ee\0\u060f\0\u0630\0\u0651\0\u0672\0\u0693\0\u06b4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[56];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\5\1\7\2\5\1\10"+
    "\2\5\1\11\1\5\1\12\1\5\1\13\2\14\2\3"+
    "\1\5\3\3\10\5\1\15\17\16\3\17\1\15\1\17"+
    "\1\16\3\15\10\16\42\0\1\5\1\20\15\5\5\0"+
    "\1\5\1\21\1\5\1\22\10\5\1\0\17\5\5\0"+
    "\1\5\1\21\1\5\1\22\10\5\1\0\4\5\1\23"+
    "\12\5\5\0\1\5\1\21\1\5\1\22\10\5\1\0"+
    "\11\5\1\24\5\5\5\0\1\5\1\21\1\5\1\22"+
    "\10\5\1\0\4\5\1\25\12\5\5\0\1\5\1\21"+
    "\1\5\1\22\10\5\1\0\1\26\16\5\5\0\1\5"+
    "\1\21\1\5\1\22\10\5\1\0\1\5\1\27\15\5"+
    "\5\0\1\5\1\21\1\5\1\22\10\5\21\0\1\14"+
    "\26\0\1\30\13\0\1\31\4\0\1\31\11\0\17\32"+
    "\3\0\1\31\1\0\1\32\1\33\1\32\1\31\10\32"+
    "\7\0\1\30\10\0\3\34\1\31\1\34\3\0\1\31"+
    "\11\0\1\5\1\35\15\5\5\0\1\5\1\21\1\5"+
    "\1\22\10\5\1\0\17\5\5\0\1\5\1\0\1\5"+
    "\1\0\10\5\1\0\17\36\5\0\1\36\3\0\10\36"+
    "\1\0\5\5\1\37\11\5\5\0\1\5\1\21\1\5"+
    "\1\22\10\5\1\0\3\5\1\40\13\5\5\0\1\5"+
    "\1\21\1\5\1\22\10\5\1\0\1\5\1\41\15\5"+
    "\5\0\1\5\1\21\1\5\1\22\10\5\1\0\14\5"+
    "\1\42\2\5\5\0\1\5\1\21\1\5\1\22\10\5"+
    "\1\0\4\5\1\43\12\5\5\0\1\5\1\21\1\5"+
    "\1\22\10\5\31\0\1\44\10\0\17\32\5\0\1\32"+
    "\1\33\1\32\1\0\10\32\1\0\17\32\5\0\1\32"+
    "\1\0\1\32\1\0\10\32\20\0\3\34\1\0\1\34"+
    "\15\0\2\5\1\45\14\5\5\0\1\5\1\21\1\5"+
    "\1\22\10\5\1\0\17\36\5\0\1\36\1\46\1\36"+
    "\1\22\10\36\1\0\6\5\1\47\10\5\5\0\1\5"+
    "\1\21\1\5\1\22\10\5\1\0\2\5\1\50\14\5"+
    "\5\0\1\5\1\21\1\5\1\22\10\5\1\0\11\5"+
    "\1\51\5\5\5\0\1\5\1\21\1\5\1\22\10\5"+
    "\1\0\7\5\1\52\7\5\5\0\1\5\1\21\1\5"+
    "\1\22\10\5\1\0\16\5\1\53\5\0\1\5\1\21"+
    "\1\5\1\22\10\5\32\0\1\54\7\0\1\5\1\50"+
    "\15\5\5\0\1\5\1\21\1\5\1\22\10\5\1\0"+
    "\17\36\5\0\1\36\1\0\1\36\1\0\10\36\1\0"+
    "\7\5\1\55\7\5\5\0\1\5\1\21\1\5\1\22"+
    "\10\5\1\0\5\5\1\56\11\5\5\0\1\5\1\21"+
    "\1\5\1\22\10\5\1\0\12\5\1\50\4\5\5\0"+
    "\1\5\1\21\1\5\1\22\10\5\1\0\1\50\16\5"+
    "\5\0\1\5\1\21\1\5\1\22\10\5\33\0\1\57"+
    "\6\0\1\5\1\53\15\5\5\0\1\5\1\21\1\5"+
    "\1\22\10\5\1\0\11\5\1\52\5\5\5\0\1\5"+
    "\1\21\1\5\1\22\10\5\16\0\1\60\55\0\1\61"+
    "\41\0\1\62\41\0\1\63\34\0\1\64\41\0\1\65"+
    "\44\0\1\66\41\0\1\67\41\0\1\70\34\0\1\31"+
    "\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1749];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\10\1\1\11\4\1\2\0\5\1\1\0"+
    "\1\11\1\1\1\0\10\1\1\0\1\1\1\0\5\1"+
    "\1\0\2\1\12\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[56];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */


  StringBuffer sentence = new StringBuffer();


  private Symbol symbol(Sym type) {
    return new Symbol(type, yyline, yycolumn, yytext());
  }

  private Symbol symbol(Sym type, StringBuffer text) {
      return new Symbol(type, yyline, yycolumn, text.toString());
  }
  private Symbol symbol(Sym type, Object value) {
    return new Symbol(type, yyline, yycolumn, yytext(), value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LogAnalyzerLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2858) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.print(yytext());
            }
          case 8: break;
          case 2: 
            { sentence = new StringBuffer(yytext()); yybegin(SENTENCE);
            }
          case 9: break;
          case 3: 
            { /* ignore */
            }
          case 10: break;
          case 4: 
            { yybegin(YYINITIAL);
            return symbol(Sym.SENTENCE, sentence);
            }
          case 11: break;
          case 5: 
            { sentence.append(yytext());
            }
          case 12: break;
          case 6: 
            { return symbol(Sym.PATH);
            }
          case 13: break;
          case 7: 
            { return symbol(Sym.LEVEL);
            }
          case 14: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
